.d-grid {
    display: grid;
    justify-content: stretch;
    justify-items: stretch;
    align-items: flex-start;
}

.grid-items-align-top {
    align-items: flex-start !important;
}

.grid-items-align-middle {
    align-items: center !important;
}

.grid-items-align-bottom {
    align-items: flex-end !important;
}

.grid-columns-auto-fit-100 {
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
}

.grid-columns-auto-fit-200 {
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
}

.grid-columns-auto-fit-300 {
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
}

.grid-rows-same-height-auto {
    grid-auto-rows: auto;
}

.grid-rows-same-height-min-content {
    grid-auto-rows: min-content;
}

.grid-rows-same-height-max-content {
    grid-auto-rows: max-content;
}

@mixin css-grid-classes($infix: '') {
    @for $i from 1 through $css-grid-max-columns {
        .grid-columns#{$infix}-#{$i} {
            grid-template-columns: repeat($i, 1fr);
        }
    }

    @for $i from 1 through $css-grid-max-rows {
        .grid-rows#{$infix}-#{$i} {
            grid-template-rows: repeat($i, 1fr);
        }
    }

    @each $step, $value in $css-grid-columns-gaps {
        .grid-columns-gap#{$infix}-#{$step} {
            grid-column-gap: $value;
        }
    }

    @each $step, $value in $css-grid-rows-gaps {
        .grid-rows-gap#{$infix}-#{$step} {
            grid-row-gap: $value;
        }
    }
}

@each $breakpoint in map-keys($grid-breakpoints) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @include media-breakpoint-up($breakpoint) {
        @include css-grid-classes($infix);
    }
}
