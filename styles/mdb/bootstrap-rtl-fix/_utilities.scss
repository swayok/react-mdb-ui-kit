@import "mixins/utilities";
@import "mixins/breakpoints";
@import "../../variables/features";
@import "../../variables/grid";
@import "../../variables/utilities";
@import "../../mixins/svg-icons";
@import "mixins/breakpoints";
@import "../../variables/typography";
@import "../../variables/form-dropdown-select";

// Loop over each breakpoint
@each $breakpoint in map-keys($grid-breakpoints) {
    // Generate media query if needed
    @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        // Loop over each utility property
        @each $key, $utility in $utilities {
            // The utility can be disabled with `false`, thus check if the utility is a map first
            // Only proceed if responsive media queries are enabled or if it's the base media query
            @if type-of($utility) == 'map' and (map-get($utility, responsive) or $infix == '') {
                @include generate-utility($utility, $infix);
            }
        }
    }
}

// RFS rescaling
@media (min-width: $rfs-mq-value) {
    @each $breakpoint in map-keys($grid-breakpoints) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        @if (map-get($grid-breakpoints, $breakpoint) < $rfs-breakpoint) {
            // Loop over each utility property
            @each $key, $utility in $utilities {
                // The utility can be disabled with `false`, thus check if the utility is a map first
                // Only proceed if responsive media queries are enabled or if it's the base media query
                @if type-of($utility) == 'map' and map-get($utility, rfs) and (map-get($utility, responsive) or $infix == '') {
                    @include generate-utility($utility, $infix, true);
                }
            }
        }
    }
}

// Print utilities
@if $include-print-styles {
    @media print {
        @each $key, $utility in $utilities {
            // The utility can be disabled with `false`, thus check if the utility is a map first
            // Then check if the utility needs print styles
            @if type-of($utility) == 'map' and map-get($utility, print) == true {
                @include generate-utility($utility, '-print');
            }
        }
    }
}


.smooth-scroll {
    scroll-behavior: smooth;
}

.text-break-all {
    white-space: normal;
    word-break: break-all;
}

.text-multiline {
    white-space: pre-wrap;
    word-break: normal;
}

.text-transform-none {
    text-transform: none !important;
}

.limited-text-block-width {
    max-width: $limited-text-block-width;
}

.no-pointer-events-for-children > * {
    pointer-events: none;
}

svg.mdi-icon.chevron,
.chevron {
    @include mdi-icon-color($form-dropdown-select-chevron-color);
}

@each $breakpoint in map-keys($grid-breakpoints) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @include media-breakpoint-down($breakpoint) {
        .full-width#{$infix} {
            width: 100% !important;
        }

        .auto-height#{$infix} {
            height: auto !important;
        }
    }

    @include media-breakpoint-up($breakpoint) {
        .auto-width#{$infix} {
            width: auto !important;
        }

        .full-height#{$infix} {
            height: 100% !important;
        }

        .flex#{$infix}-1 {
            flex: 1 !important;
        }

        .flex#{$infix}-0 {
            flex: none !important;
        }

        .flex#{$infix}-center {
            display: flex !important;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .flex#{$infix}-container-column {
            display: flex !important;
            flex-direction: column;
            align-items: stretch;
            justify-content: flex-start;
        }

        .flex#{$infix}-container-row {
            display: flex !important;
            flex-direction: row;
            align-items: stretch;
            justify-content: flex-start;
        }

        .flex#{$infix}-row-between {
            display: flex !important;
            flex-direction: row;
            align-items: center;
            justify-content: space-between;
        }

        .flex#{$infix}-row-center {
            display: flex !important;
            flex-direction: row;
            align-items: center;
            justify-content: center;
        }

        .flex#{$infix}-row-center-vertical {
            display: flex !important;
            flex-direction: row;
            align-items: center;
        }
    }
}
