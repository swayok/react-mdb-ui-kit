//
// Base styles
//

@use "sass:math";
@import "../../mixins/rfs";
@import "../../mixins/border-radius";
@import "../../functions/calc-utils";
@import "../../functions/button-utils";
@import "../../variables/form-input-group";
@import "../../variables/form-select";
@import "../../variables/form-validation";
@import "../../variables/buttons";

@import "../../variables/features";

@if ($include-forms-and-inputs and $include-input-group) {
    .input-group {
        position: relative;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap; // For form validation feedback
        align-items: start;
        width: 100%;

        > .form-control,
        > .form-select {
            position: relative; // For focus state's z-index
            flex: 1 1 auto;
            width: 1%;
            min-width: 0; // https://stackoverflow.com/questions/36247140/why-dont-flex-items-shrink-past-content-size
            min-height: $input-group-addon-min-height;
            padding-top: $input-group-padding-y;
            padding-bottom: $input-group-padding-y;
            transition: $input-group-transition;

            &.form-control-sm {
                min-height: $input-group-addon-min-height-sm;
            }

            &.form-control-lg {
                min-height: $input-group-addon-min-height-lg;
            }
        }

        // Bring the "active" form control to the top of surrounding elements
        > .form-control:focus,
        > .form-select:focus, {
            z-index: 3;
            transition: $input-group-focus-transition;
            border-color: $input-group-focus-border-color;
            outline: 0;
            box-shadow: $input-group-focus-box-shadow;
        }

        > .form-control.is-invalid,
        > .form-validation-container.is-invalid {
            z-index: 3;
        }

        // Ensure buttons are always above inputs for more visually pleasing borders.
        // This isn't needed for `.input-group-text` since it shares the same border-color
        // as our inputs.
        .btn {
            position: relative;
            z-index: 2;
            min-height: $input-group-addon-min-height;

            &.btn-sm {
                min-height: $input-group-addon-min-height-sm;
            }

            &:focus {
                z-index: 3;
            }
        }

        &.form-outline {
            .input-group-text {
                border-left: 0;
            }

            input + .input-group-text {
                border: 0;
                border-left: $input-group-form-outline-border-left-width solid $input-group-form-outline-border-left-color;
            }
        }

        .form-outline {
            margin-bottom: 0 !important;
        }

        > :not(:first-child) {
            &.form-outline,
            > .form-outline {
                .form-notch-leading,
                .form-control {
                    border-top-left-radius: 0 !important;
                    border-bottom-left-radius: 0 !important;
                }
            }
        }

        > :not(:last-child) {
            &.form-outline,
            > .form-outline {
                .form-notch-trailing,
                .form-control {
                    border-top-right-radius: 0 !important;
                    border-bottom-right-radius: 0 !important;
                }
            }
        }

        &.with-input-label {
            .form-outline {
                flex: 1;
            }
        }
    }

    .input-group > [class*='btn-outline-'] + [class*='btn-outline-'] {
        border-left: 0;
    }

    // Textual addons
    //
    // Serves as a catch-all element for any text or radio/checkbox input you wish
    // to prepend or append to an input.

    .input-group-text {
        display: flex;
        align-items: center;
        flex-shrink: 0;
        padding: $input-group-addon-padding-y $input-group-addon-padding-x;
        @include font-size($input-group-addon-font-size); // Match inputs
        font-weight: $input-group-addon-font-weight;
        line-height: $input-line-height;
        color: $input-group-addon-color;
        text-align: center;
        white-space: nowrap;
        background-color: $input-group-addon-bg;
        border: $input-border-width solid $input-group-addon-border-color;
        min-height: $input-group-addon-min-height;
        @include border-radius($input-border-radius);

        &.input-group-text-sm {
            padding: $input-group-addon-padding-y-sm $input-group-addon-padding-x-sm;
            @include font-size($input-group-addon-font-size-sm);
            min-height: $input-group-addon-min-height-sm;
        }

        &.input-group-text-lg {
            padding: $input-group-addon-padding-y-lg $input-group-addon-padding-x-lg;
            @include font-size($input-group-addon-font-size-lg);
            min-height: $input-group-addon-min-height-lg;
        }
    }

    // Несколько .form-outline полей ввода в группе.
    .input-group-item {
        min-height: $input-group-addon-min-height;

        &.first {
            &.form-outline,
            > .form-outline {
                &,
                input,
                .form-notch-trailing {
                    border-top-right-radius: 0 !important;
                    border-bottom-right-radius: 0 !important;
                }
            }
        }

        &.center {
            margin-left: -0.6px !important;

            &.form-outline,
            > .form-outline {
                &,
                input,
                .form-notch-leading,
                .form-notch-trailing {
                    border-radius: 0 !important;
                }
            }
        }

        &.last {
            margin-left: -0.6px !important;

            &.form-outline,
            > .form-outline {
                &,
                input,
                .form-notch-leading {
                    border-top-left-radius: 0 !important;
                    border-bottom-left-radius: 0 !important;
                }
            }
        }
    }

    // Rounded corners
    //
    // These rulesets must come after the sizing ones to properly override sm and lg
    // border-radius values when extending. They're more specific than we'd like
    // with the `.input-group >` part, but without it, we cannot override the sizing.

    // stylelint-disable-next-line no-duplicate-selectors
    .input-group {
        &:not(.has-validation) {
            > :not(:last-child):not(.dropdown-toggle):not(.dropdown-menu),
            > .dropdown-toggle:nth-last-child(n + 3) {
                @include border-end-radius(0);
            }
        }

        &.has-validation {
            > :nth-last-child(n + 3):not(.dropdown-toggle):not(.dropdown-menu),
            > .dropdown-toggle:nth-last-child(n + 4) {
                @include border-end-radius(0);
            }
        }

        $validation-messages: '';
        @each $state in map-keys($form-validation-states) {
            $validation-messages: $validation-messages + ':not(.' + unquote($state) + '-tooltip)' + ':not(.' + unquote($state) + '-feedback)';
        }

        > :not(:first-child):not(.dropdown-menu)#{$validation-messages} {
            margin-left: -$input-border-width;
            @include border-start-radius(0);
        }
    }
}
