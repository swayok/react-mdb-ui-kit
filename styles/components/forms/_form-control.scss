// General form controls (plus a few specific high-level interventions).
@use "sass:math";
@use "../../mixins/rfs";
@use "../../mixins/border-radius";
@use "../../mixins/box-shadow";
@use "../../mixins/gradients";
@use "../../mixins/transition";
@use "../../variables/form-input-base";
@use "../../variables/features";

@if (features.$include-forms-and-inputs and features.$include-form-control) {

    .form-control {
        display: block;
        width: 100%;
        min-height: auto;
        padding: form-input-base.$input-padding-y form-input-base.$input-padding-x;
        font-family: form-input-base.$input-font-family;
        font-weight: form-input-base.$input-font-weight;
        line-height: form-input-base.$input-line-height;
        color: form-input-base.$input-color;
        background-color: form-input-base.$input-bg;
        background-clip: padding-box;
        border: form-input-base.$input-border-width solid form-input-base.$input-border-color;
        appearance: none; // Fix appearance for date inputs in Safari

        // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
        @include border-radius.border-radius(form-input-base.$input-border-radius, 0);

        @include box-shadow.box-shadow(form-input-base.$input-box-shadow);
        @include rfs.font-size(form-input-base.$input-font-size);
        @include transition.transition(form-input-base.$input-transition);

        &[type='file'] {
            overflow: hidden; // prevent pseudo element button overlap

            &:not(:disabled):not([readonly]) {
                cursor: pointer;
            }
        }

        // Customize the `:focus` state to imitate native WebKit styles.
        &:focus {
            color: form-input-base.$input-focus-color;
            background-color: form-input-base.$input-focus-bg;
            border-color: form-input-base.$input-focus-border-color;
            outline: 0;
            // DO NOT USE box-shadow() MIXIN HERE!
            box-shadow: inset 0 0 0 1px form-input-base.$input-focus-border-color;
            @include transition.transition(form-input-base.$input-focus-transition);
        }

        // Placeholder
        &::placeholder {
            color: form-input-base.$input-placeholder-color;
            // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
            opacity: 1;
        }

        // Disabled and read-only inputs
        //
        // HTML5 says that controls under a fieldset > legend:first-child won't be
        // disabled if the fieldset is disabled. Due to implementation difficulty, we
        // don't honor that edge case; we style them as disabled anyway.

        &:disabled,
        &.disabled,
        &[readonly] {
            // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
            opacity: 1;
            cursor: not-allowed;
            resize: none;
            outline: none;
        }

        &:disabled,
        &.disabled {
            color: form-input-base.$input-disabled-color;
            background-color: form-input-base.$input-disabled-bg;
            border-color: form-input-base.$input-disabled-border-color;
        }

        &[readonly] {
            color: form-input-base.$input-readonly-color;
            background-color: form-input-base.$input-readonly-bg;
            border-color: form-input-base.$input-readonly-border-color;
        }
    }

    // Readonly controls as plain text
    //
    // Apply class to a readonly input to make it appear like regular plain
    // text (without any border, background color, focus indicator)

    .form-control-plaintext {
        display: block;
        width: 100%;
        padding: form-input-base.$input-padding-y 0;
        margin-bottom: 0; // match inputs if this class comes on inputs with default margins
        line-height: form-input-base.$input-line-height;
        color: form-input-base.$input-plaintext-color;
        background-color: transparent;
        border: solid transparent;
        border-width: form-input-base.$input-border-width 0;

        &.form-control-sm,
        &.form-control-lg {
            padding-right: 0;
            padding-left: 0;
        }
    }

    // Form control sizing
    //
    // Build on `.form-control` with modifier classes to decrease or increase the
    // height and font-size of form controls.
    //
    // Repeated in `_input_group.scss` to avoid Sass extend issues.

    .form-control-sm {
        min-height: form-input-base.$input-height-sm;
        padding: form-input-base.$input-padding-y-sm form-input-base.$input-padding-x-sm;
        @include border-radius.border-radius(form-input-base.$input-border-radius-sm);
        @include rfs.font-size(form-input-base.$input-font-size-sm);

        &::file-selector-button {
            padding: form-input-base.$input-padding-y-sm form-input-base.$input-padding-x-sm;
            margin: (form-input-base.$input-padding-y-sm * -1) (form-input-base.$input-padding-x-sm * -1);
            margin-inline-end: form-input-base.$input-padding-x-sm;
        }

        &::-webkit-file-upload-button {
            padding: form-input-base.$input-padding-y-sm form-input-base.$input-padding-x-sm;
            margin: (form-input-base.$input-padding-y-sm * -1) (form-input-base.$input-padding-x-sm * -1);
            margin-inline-end: form-input-base.$input-padding-x-sm;
        }
    }

    .form-control-lg {
        min-height: form-input-base.$input-height-lg;
        padding: form-input-base.$input-padding-y-lg form-input-base.$input-padding-x-lg;
        @include border-radius.border-radius(form-input-base.$input-border-radius-lg);
        @include rfs.font-size(form-input-base.$input-font-size-lg);

        &::file-selector-button {
            padding: form-input-base.$input-padding-y-lg form-input-base.$input-padding-x-lg;
            margin: (form-input-base.$input-padding-y-lg * -1) (form-input-base.$input-padding-x-lg * -1);
            margin-inline-end: form-input-base.$input-padding-x-lg;
        }

        &::-webkit-file-upload-button {
            padding: form-input-base.$input-padding-y-lg form-input-base.$input-padding-x-lg;
            margin: (form-input-base.$input-padding-y-lg * -1) (form-input-base.$input-padding-x-lg * -1);
            margin-inline-end: form-input-base.$input-padding-x-lg;
        }
    }

    // Make sure textareas don't shrink too much when resized
    // https://github.com/twbs/bootstrap/pull/29124
    // stylelint-disable selector-no-qualifying-type
    textarea {
        &.form-control {
            min-height: form-input-base.$input-height;
        }

        &.form-control-sm {
            min-height: form-input-base.$input-height-sm;
        }

        &.form-control-lg {
            min-height: form-input-base.$input-height-lg;
        }
    }

    // stylelint-enable selector-no-qualifying-type

    .form-control-color {
        max-width: 3rem;
        height: auto; // Override fixed browser height
        padding: form-input-base.$input-padding-y;

        &:not(:disabled):not([readonly]) {
            cursor: pointer;
        }

        &::-moz-color-swatch {
            height: if(math.unit(form-input-base.$input-line-height) == '', form-input-base.$input-line-height * 1em, form-input-base.$input-line-height);
            @include border-radius.border-radius(form-input-base.$input-border-radius);
        }

        &::-webkit-color-swatch {
            height: if(math.unit(form-input-base.$input-line-height) == '', form-input-base.$input-line-height * 1em, form-input-base.$input-line-height);
            @include border-radius.border-radius(form-input-base.$input-border-radius);
        }
    }

    // Корректировка стилизации при срабатывании автозаполнения в Chrome Browser и аналогичных.
    // Не применять глобально!
    input.autofill-restyle {
        &:-webkit-autofill,
        &:-webkit-autofill:hover,
        &:-webkit-autofill:active,
        &:-webkit-autofill:focus {
            box-shadow: 0 0 0 1000px #FFF inset !important;
        }
    }

    // Поле ввода с автоматическим ростом высоты по мере ввода текста.
    textarea.autogrow {
        overflow-y: auto !important;
        height: form-input-base.$input-textarea-autogrow-min-height; //< required for animation to work
        min-height: form-input-base.$input-textarea-autogrow-min-height; //< required for animation to work
        transition: height 0.1s linear, form-input-base.$input-transition !important;
        resize: none;

        &.minimal {
            min-height: form-input-base.$input-textarea-autogrow-minimal-min-height;
            height: form-input-base.$input-textarea-autogrow-minimal-min-height;
            line-height: form-input-base.$input-textarea-autogrow-minimal-line-height;
            padding-top: form-input-base.$input-textarea-autogrow-minimal-padding-y;
            padding-bottom: form-input-base.$input-textarea-autogrow-minimal-padding-y;
        }
    }
}
