@use "../functions/color-utils";
@use "../mixins/svg-icons";
@use "../variables/body";
@use "../variables/icons";
@use "../variables/color-lists";
@use "../variables/links";
@use "../variables/features";

@if (features.$include-icon) {
    svg.mdi-icon {
        @include svg-icons.mdi-icon-color(icons.$icon-text-color);
        pointer-events: none;
        flex-shrink: 0;

        path {
            transition: fill 0.2s linear;
        }

        &.mdi-rotatable {
            transition: transform 0.1s linear;
            transform: rotate(0deg);
            transform-origin: 50% 50%;
        }

        @each $color, $value in color-lists.$icon-colors {
            &.text-#{$color} {
                @include svg-icons.mdi-icon-color($value !important);
            }
        ;

            .clickable:hover &.text-#{$color},
            a:hover &.text-#{$color} {
                @include svg-icons.mdi-icon-color(lighten($value, 10%) !important);
            }
        }
    }

    svg.custom-icon {
        pointer-events: none;
        flex-shrink: 0;

        g, path, rect, circle, ellipse {
            transition: fill 0.2s linear, stroke 0.2s linear;
        }

        &.colored-by-fill {
            fill: icons.$icon-text-color;
            stroke: none;
        }

        &.colored-by-stroke {
            fill: none;
            stroke: icons.$icon-text-color;
        }

        &.custom-icon-rotatable {
            transition: transform 0.1s linear;
            transform: rotate(0deg);
            transform-origin: 50% 50%;
        }

        @each $color, $value in color-lists.$icon-colors {
            &.text-#{$color} {
                @include svg-icons.custom-icon-color($value !important);
            }
        ;

            a:hover &.text-#{$color} {
                @include svg-icons.custom-icon-color(lighten($value, 10%) !important);
            }
        }
    }

    a,
    .clickable {
        @include svg-icons.contained-mdi-icon-color-in-link(
                links.$link-color,
                links.$link-hover-color,
                links.$link-disabled-color
        );

        @include svg-icons.contained-custom-svg-icon-color-in-link(
                links.$link-color,
                links.$link-hover-color,
                links.$link-disabled-color
        );
    }

    @each $color, $value in color-lists.$link-colors {
        .link-#{$color} {
            @include svg-icons.contained-mdi-icon-color-in-link(
                    $value !important,
                    color-utils.link-hover-color($value, links.$link-shade-percentage) !important,
                    links.$link-disabled-color !important
            );
        }
    }

    @each $color, $value in color-lists.$button-colors {
        .btn {
            &.btn-#{$color} {
                @include svg-icons.contained-mdi-icon-color-in-button($value)
            }

            &.btn-outline-#{$color} {
                @include svg-icons.contained-mdi-icon-color($value);
            }
        }
    }

    .with-icon:not(.btn) {
        svg.mdi-icon,
        svg.custom-icon {
            display: inline-block;
            margin-top: -2px;
        }
    }

    .btn.with-icon {
        display: inline-block;
        vertical-align: top;

        svg.mdi-icon,
        svg.custom-icon {
            vertical-align: text-top;
        }
    }

    .with-icon-flex {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: flex-start;

        svg.mdi-icon,
        svg.custom-icon {
            vertical-align: top;
        }
    }
}
