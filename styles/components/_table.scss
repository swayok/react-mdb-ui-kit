//
// Basic Bootstrap table
//
@use "../mixins/breakpoints";
@use "../mixins/table-variants";
@use "../variables/css-variables";
@use "../variables/color-lists";
@use "../variables/table";
@use "../variables/features";
@use "../variables/grid";

@if (features.$include-table) {
    .table {
        --#{css-variables.$variable-prefix}table-bg: #{table.$table-bg};
        --#{css-variables.$variable-prefix}table-accent-bg: #{table.$table-bg};
        --#{css-variables.$variable-prefix}table-striped-color: #{table.$table-striped-color};
        --#{css-variables.$variable-prefix}table-striped-bg: #{table.$table-striped-bg};
        --#{css-variables.$variable-prefix}table-active-color: #{table.$table-active-color};
        --#{css-variables.$variable-prefix}table-active-bg: #{table.$table-active-bg};
        --#{css-variables.$variable-prefix}table-hover-color: #{table.$table-hover-color};
        --#{css-variables.$variable-prefix}table-hover-bg: #{table.$table-hover-bg};

        width: 100%;
        margin-bottom: table.$table-margin-bottom;
        color: table.$table-color;
        vertical-align: table.$table-cell-vertical-align;
        border-color: table.$table-border-color;
        font-size: table.$table-font-size;

        // Target th & td
        // We need the child combinator to prevent styles leaking to nested tables which doesn't have a `.table` class.
        // We use the universal selectors here to simplify the selector (else we would need 6 different selectors).
        // Another advantage is that this generates less code and makes the selector less specific making it easier to override.
        // stylelint-disable-next-line selector-max-universal
        > :not(caption) > * > * {
            padding: table.$table-cell-padding-y table.$table-cell-padding-x;
            background-color: var(--#{css-variables.$variable-prefix}table-bg);
            border-bottom-width: table.$table-border-width;
            box-shadow: inset 0 0 0 9999px var(--#{css-variables.$variable-prefix}table-accent-bg);
        }

        > tbody {
            vertical-align: inherit;
            font-weight: table.$table-tbody-font-weight;

            > tr.odd {
                > td,
                > th {
                    background-color: table.$table-striped-bg;
                }
            }
        }

        > thead {
            vertical-align: bottom;
        }

        th {
            font-weight: table.$table-th-font-weight;
        }

        // Highlight border color between thead, tbody and tfoot.
        > :not(:last-child) > :last-child > * {
            border-bottom-color: table.$table-group-separator-color;
        }

        &.table-no-border-for-last-row {
            tbody > tr:last-child td {
                border-bottom-width: 0 !important;
            }
        }
    }

    //
    // Change placement of captions with a class
    //

    .caption-top {
        caption-side: top;
    }

    //
    // Condensed table w/ half padding
    //

    .table-sm {
        // stylelint-disable-next-line selector-max-universal
        > :not(caption) > * > * {
            padding: table.$table-cell-padding-y-sm table.$table-cell-padding-x-sm;
        }
    }

    // Border versions
    //
    // Add or remove borders all around the table and between all the columns.
    //
    // When borders are added on all sides of the cells, the corners can render odd when
    // these borders do not have the same color or if they are semi-transparent.
    // Therefor we add top and border bottoms to the `tr`s and left and right borders
    // to the `td`s or `th`s

    .table-bordered {
        > :not(caption) > * {
            border-width: table.$table-border-width 0;

            // stylelint-disable-next-line selector-max-universal
            > * {
                border-width: 0 table.$table-border-width;
            }
        }
    }

    .table-borderless {
        // stylelint-disable-next-line selector-max-universal
        > :not(caption) > * > * {
            border-bottom-width: 0;
        }
    }

    // Zebra-striping
    //
    // Default zebra-stripe styles (alternating gray and transparent backgrounds)

    .table-striped {
        > tbody > tr:nth-of-type(#{table.$table-striped-order}) {
            --#{css-variables.$variable-prefix}table-accent-bg: var(--#{css-variables.$variable-prefix}table-striped-bg);
            color: var(--#{css-variables.$variable-prefix}table-striped-color);
        }
    }

    // Active table
    //
    // The `.table-active` class can be added to highlight rows or cells

    .table-active {
        --#{css-variables.$variable-prefix}table-accent-bg: var(--#{css-variables.$variable-prefix}table-active-bg);
        color: var(--#{css-variables.$variable-prefix}table-active-color);
    }

    // Hover effect
    //
    // Placed here since it has to come after the potential zebra striping

    .table-hover {
        > tbody > tr {
            transition: table.$table-hover-transition;
        }

        > tbody > tr:hover {
            --#{css-variables.$variable-prefix}table-accent-bg: transparent;
            color: var(--#{css-variables.$variable-prefix}table-hover-color);
            background-color: var(--#{css-variables.$variable-prefix}table-hover-bg);
        }
    }

    .table-fixed {
        table-layout: fixed;
    }

    .table-auto {
        table-layout: auto;
    }

    // Table variants
    //
    // Table variants set the table cell backgrounds, border colors
    // and the colors of the striped, hovered & active tables

    @each $color, $value in color-lists.$table-variants {
        @include table-variants.table-variant($color, $value);
    }

    // Table cell highlights.

    @each $color, $value in color-lists.$table-cell-highlights {
        .table-highlight-#{$color},
        tr.table-highlight-#{$color} > td {
            background-color: $value !important;
        }
    }

    // Responsive tables
    //
    // Generate series of `.table-responsive-*` classes for configuring the screen
    // size of where your table will overflow.

    @each $breakpoint in map-keys(grid.$grid-breakpoints) {
        $infix: breakpoints.breakpoint-infix($breakpoint, grid.$grid-breakpoints);

        @include breakpoints.media-breakpoint-down($breakpoint) {
            .table-responsive#{$infix} {
                overflow-x: auto;
                -webkit-overflow-scrolling: touch;
            }
        }
    }
}

